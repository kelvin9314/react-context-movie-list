{"version":3,"sources":["lib/helpers.js","lib/apiCall.js","contexts/MovieProvider.js","components/card.js","components/card-list.js","pages/movies.js","App.js","i18n.js","index.js"],"names":["httpQueryBuilder","params","qs","stringify","API_TOKEN","process","fetchMovie","a","page","lang","console","log","axios","get","language","api_key","data","message","MovieContext","createContext","MovieProvider","props","i18n","useTranslation","useState","setPage","movies","setMovies","shouldRefetch","setShouldRefetch","useEffect","_getMovie","num","results","Provider","value","_changeLang","targetLang","changeLanguage","children","Card","movie","className","alt","title","width","src","poster_path","style","textAlign","release_date","CardList","map","key","id","Movies","t","useContext","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","onClick","length","color","App","resources","translation","enTrans","twTrans","use","initReactI18next","init","lng","localStorage","fallbackLng","whitelist","debug","interpolation","escapeValue","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3db55ea8.chunk.js","sourcesContent":["import qs from 'qs'\n\nexport const httpQueryBuilder = params => qs.stringify(params)\n","import axios from 'axios'\nimport { httpQueryBuilder } from './helpers'\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || 'https://api.themoviedb.org/3/movie'\nconst API_TOKEN = process.env.REACT_APP_API_TOKEN\n// console.log(process.env.REACT_APP_BASE_URL)\n// console.log(process.env.REACT_APP_API_TOKEN)\n\nexport const fetchMovie = async ({ page, lang }) => {\n  try {\n    if (!API_TOKEN) throw Error(\"API Token doesn't exist\")\n    console.log(httpQueryBuilder({ page, lang }))\n\n    const { data } = await axios.get(\n      `${BASE_URL}/now_playing?${httpQueryBuilder({\n        page,\n        language: lang,\n        api_key: API_TOKEN,\n      })}`\n    )\n    return data\n  } catch (err) {\n    console.log(err.message)\n    throw err\n  }\n}\n","import React, { createContext, useState, useEffect } from 'react'\n// import { httpQueryBuilder } from '../lib/helpers'\nimport { fetchMovie } from '../lib/apiCall'\nimport { useTranslation } from 'react-i18next'\n\nexport const MovieContext = createContext()\n\nconst MovieProvider = props => {\n  const { i18n } = useTranslation()\n  const [page, setPage] = useState(0)\n  const [movies, setMovies] = useState([])\n  const [shouldRefetch, setShouldRefetch] = useState(false)\n\n  useEffect(() => {\n    setMovies([])\n    setPage(0)\n    setShouldRefetch(true)\n  }, [i18n.language])\n\n  /**\n   * 改變目前語系\n   * 語系現在只有 \"zh-TW\" or \"en-US\"\n   */\n  const _changeLang = () => {\n    const targetLang = i18n.language === 'zh-TW' ? 'en-US' : 'zh-TW'\n    i18n.changeLanguage(targetLang)\n  }\n\n  const _getMovie = async () => {\n    try {\n      const num = page + 1\n      setPage(num)\n      const { results } = await fetchMovie({ page: num, lang: i18n.language })\n      setMovies([...movies, ...results])\n      if (shouldRefetch) setShouldRefetch(false)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  return (\n    <MovieContext.Provider value={{ movies, shouldRefetch, _changeLang, _getMovie }}>\n      {props.children}\n    </MovieContext.Provider>\n  )\n}\n\nexport default MovieProvider\n","import React from 'react'\n\nimport '../style/card.css'\n\nconst Card = ({ movie }) => {\n  return (\n    <div className=\"card-container\">\n      <img alt={movie.title} width=\"100%\" src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} />\n      <h3 style={{ textAlign: 'center' }}>{movie.title}</h3>\n      <span style={{ textAlign: 'center' }}>{movie.release_date}</span>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\n\nimport Card from './card'\n\nimport '../style/card-list.css'\n\nconst CardList = ({ movies }) => {\n  return (\n    <div className=\"card-list\">\n      {movies.map(movie => (\n        <Card key={movie.id} movie={movie} />\n      ))}\n    </div>\n  )\n}\n\nexport default CardList\n","import React, { useContext, useEffect } from 'react'\nimport { MovieContext } from '../contexts/MovieProvider'\nimport { useTranslation } from 'react-i18next'\n\nimport CardList from '../components/card-list'\n\nconst Movies = () => {\n  const { t, i18n } = useTranslation()\n  const { movies, shouldRefetch, _changeLang, _getMovie } = useContext(MovieContext)\n\n  useEffect(() => {\n    _getMovie()\n  }, [shouldRefetch])\n\n  useEffect(() => {\n    // https://upmostly.com/tutorials/build-an-infinite-scroll-component-in-react-using-react-hooks\n    const handleScroll = () => {\n      const current = window.innerHeight + document.documentElement.scrollTop\n      // console.log(`current: ${current}`)\n      const height = document.documentElement.offsetHeight\n      // console.log(`height: ${height}`)\n      if (current < height) return\n\n      _getMovie()\n    }\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [_getMovie])\n\n  return (\n    <div className=\"App\">\n      <h1 style={{ textAlign: 'center' }} onClick={() => _changeLang()}>\n        {t('title')}\n      </h1>\n      {movies.length > 0 ? (\n        <CardList movies={movies} />\n      ) : (\n        <h3 style={{ textAlign: 'center', color: '#f5f5dc' }}>opps! it seems that no data</h3>\n      )}\n      {/* {stateError && <h2>{stateError}</h2>} */}\n    </div>\n  )\n}\n\nexport default Movies\n","import React from 'react'\nimport Movies from './pages/movies'\n\nimport MovieProvider from './contexts/MovieProvider'\n\nfunction App() {\n  return (\n    <MovieProvider>\n      <Movies />\n    </MovieProvider>\n  )\n}\n\nexport default App\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\nimport twTrans from './asset/locales/zh-TW.json'\nimport enTrans from './asset/locales/en-US.json'\n\nconst resources = {\n  'en-US': {\n    translation: {\n      ...enTrans,\n    },\n  },\n  'zh-TW': {\n    translation: {\n      ...twTrans,\n    },\n  },\n}\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: localStorage.lang || 'zh-US',\n  fallbackLng: 'zh-TW',\n  whitelist: ['en-US', 'zh-TW'],\n  debug: process.env.NODE_ENV === 'development',\n  interpolation: {\n    escapeValue: false, // not needed for react as it escapes by default\n  },\n})\n\nexport default i18n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nimport './i18n'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}
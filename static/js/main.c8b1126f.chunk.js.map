{"version":3,"sources":["lib/helpers.js","lib/apiCall.js","contexts/MovieProvider.js","components/card.js","components/card-list.js","pages/movies.js","App.js","serviceWorker.js","index.js"],"names":["httpQueryBuilder","params","qs","stringify","API_TOKEN","process","fetchMovie","a","page","lang","console","log","axios","get","language","api_key","res","data","MovieContext","createContext","MovieProvider","props","useState","setPage","setLang","movies","setMovies","_getMovie","num","results","Provider","value","children","Card","movie","className","alt","title","width","src","poster_path","style","textAlign","release_date","CardList","map","key","id","Movies","useContext","useEffect","handleScroll","current","window","innerHeight","document","documentElement","scrollTop","height","offsetHeight","addEventListener","removeEventListener","length","color","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2VAEaA,EAAmB,SAAAC,GAAM,OAAIC,IAAGC,UAAUF,ICGjDG,EAAYC,mCAILC,EAAU,uCAAG,iCAAAC,EAAA,sDAAQC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAd,sCAGtBC,QAAQC,IAAIX,EAAiB,CAAEQ,OAAMC,UAHf,SAKJG,IAAMC,IAAN,UAVpBR,qCAUoB,wBACWL,EAAiB,CAC1CQ,OACAM,SAAUL,EACVM,QAASX,MATS,cAKhBY,EALgB,OAYtBN,QAAQC,IAAIK,GAZU,kBAafA,EAAIC,MAbW,uGAAH,sD,cCLVC,EAAeC,0BA6BbC,EA3BO,SAAAC,GAAU,IAAD,EAELC,mBAAS,GAFJ,mBAEtBd,EAFsB,KAEhBe,EAFgB,OAGLD,mBAAS,SAHJ,mBAGtBb,EAHsB,KAGhBe,EAHgB,OAIDF,mBAAS,IAJR,mBAItBG,EAJsB,KAIdC,EAJc,KAOvBC,EAAS,uCAAG,gCAAApB,EAAA,sEAGdgB,EADIK,EAAMpB,EAAO,GAFH,SAIYF,EAAW,CAAEE,KAAMoB,EAAKnB,SAJpC,gBAINoB,EAJM,EAINA,QACRH,EAAU,GAAD,mBAAKD,GAAL,YAAgBI,KALX,kDAOdnB,QAAQC,IAAR,MAPc,0DAAH,qDAWf,OACE,kBAACO,EAAaY,SAAd,CACEC,MAAO,CAAEN,SAAQjB,OAAMC,OAAMe,UAASG,cAErCN,EAAMW,WCTEC,G,MAdF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAKF,EAAMG,MACXC,MAAM,OACNC,IAAG,0CAAqCL,EAAMM,eAEhD,wBAAIC,MAAO,CAAEC,UAAW,WAAaR,EAAMG,OAC3C,0BAAMI,MAAO,CAAEC,UAAW,WAAaR,EAAMS,iBCEpCC,G,MAVE,SAAC,GAAgB,IAAdnB,EAAa,EAAbA,OAClB,OACE,yBAAKU,UAAU,aACZV,EAAOoB,KAAI,SAAAX,GAAK,OACf,kBAAC,EAAD,CAAMY,IAAKZ,EAAMa,GAAIb,MAAOA,UC0CrBc,EA7CA,WAAO,IAAD,EAE2BC,qBAC5C/B,GADMO,EAFW,EAEXA,OAAQhB,EAFG,EAEHA,KAAekB,GAFZ,EAEGH,QAFH,EAEYG,WAI/BuB,qBAAU,WACRvB,MAEC,CAAClB,IAGJ,IAAM0C,EAAe,WACnB,IAAMC,EAAUC,OAAOC,YAAcC,SAASC,gBAAgBC,UAC9D/C,QAAQC,IAAR,mBAAwByC,IACxB,IAAMM,EAASH,SAASC,gBAAgBG,aACxCjD,QAAQC,IAAR,kBAAuB+C,IACnBN,EAAUM,GAEd/B,KAQF,OALAuB,qBAAU,WAER,OADAG,OAAOO,iBAAiB,SAAUT,GAC3B,kBAAME,OAAOQ,oBAAoB,SAAUV,MACjD,CAACA,IAGF,yBAAKhB,UAAU,OACb,wBAAIM,MAAO,CAAEC,UAAW,WACrB,IADH,oDAEoD,KAEnDjB,EAAOqC,OAAS,EACf,kBAAC,EAAD,CAAUrC,OAAQA,IAElB,wBAAIgB,MAAO,CAAEC,UAAW,SAAUqB,MAAO,YAAzC,iCC7BOC,MATf,WAEE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCGcC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.c8b1126f.chunk.js","sourcesContent":["import qs from 'qs'\n\nexport const httpQueryBuilder = params => qs.stringify(params)\n","import axios from 'axios'\nimport { httpQueryBuilder } from \"./helpers\";\n\nconst BASE_URL =\n  process.env.REACT_APP_BASE_URL || 'https://api.themoviedb.org/3/movie';\nconst API_TOKEN = process.env.REACT_APP_API_TOKEN;\n\n\n\nexport const fetchMovie = async ({page, lang}) => {\n  try {\n    if (!API_TOKEN) throw Error(\"API Token doesn't exist\");\n    console.log(httpQueryBuilder({ page, lang }));\n\n    const res = await axios.get(\n      `${BASE_URL}/now_playing?${httpQueryBuilder({\n        page,\n        language: lang,\n        api_key: API_TOKEN\n      })}`\n    );\n    console.log(res);\n    return res.data\n  } catch (err) {\n    throw err\n  }\n}","import React, { createContext, useState } from 'react';\nimport { httpQueryBuilder } from '../lib/helpers';\nimport { fetchMovie } from \"../lib/apiCall\";\n\nexport const MovieContext = createContext();\n\nconst MovieProvider = props => {\n\n  const [page, setPage] = useState(0);\n  const [lang, setLang] = useState('zh-TW');  \n  const [movies, setMovies] = useState([]);\n  \n\n  const _getMovie = async () => {\n    try {\n      let num = page + 1\n      setPage(num)\n      const { results } = await fetchMovie({ page: num, lang });\n      setMovies([...movies, ...results]);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <MovieContext.Provider\n      value={{ movies, page, lang, setLang, _getMovie, }}\n    >\n      {props.children}\n    </MovieContext.Provider>\n  );\n}\n\nexport default MovieProvider","\nimport React from 'react';\n\nimport '../style/card.css';\n\nconst Card = ({ movie }) => {\n  return (\n    <div className='card-container'>\n      <img\n        alt={movie.title}\n        width='100%'\n        src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n      />\n      <h3 style={{ textAlign: 'center' }}>{movie.title}</h3>\n      <span style={{ textAlign: 'center' }}>{movie.release_date}</span>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './card';\n\nimport '../style/card-list.css';\n\nconst CardList = ({ movies }) => {\n  return (\n    <div className='card-list'>\n      {movies.map(movie => (\n        <Card key={movie.id} movie={movie} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { useState, useContext, useEffect } from 'react';\nimport { fetchMovie } from '../lib/apiCall';\nimport { MovieContext } from \"../contexts/MovieProvider\";\n\nimport CardList from '../components/card-list';\n\n\nconst Movies = () => {\n  \n  const { movies, lang, setLang, _getMovie, } = useContext(\n    MovieContext\n  );\n  \n  useEffect(() => {\n    _getMovie();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lang]);\n\n  // https://upmostly.com/tutorials/build-an-infinite-scroll-component-in-react-using-react-hooks\n  const handleScroll = () => {\n    const current = window.innerHeight + document.documentElement.scrollTop;\n    console.log(`current: ${current}`);\n    const height = document.documentElement.offsetHeight;\n    console.log(`height: ${height}`);\n    if (current < height) return;\n\n    _getMovie()\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  return (\n    <div className='App'>\n      <h2 style={{ textAlign: 'center' }}>\n        {' '}\n        Movie list context Version (Data from themoviedb){' '}\n      </h2>\n      {movies.length > 0 ? (\n        <CardList movies={movies} />\n      ) : (\n        <h3 style={{ textAlign: 'center', color: '#f5f5dc' }}>\n          opps! it seems that no data\n        </h3>\n      )}\n      {/* {stateError && <h2>{stateError}</h2>} */}\n    </div>\n  );\n}\n\nexport default Movies","import React from 'react';\nimport Movies from './pages/movies';\n\nimport MovieProvider from './contexts/MovieProvider';\n\nfunction App() {\n  \n  return (\n    <MovieProvider>\n      <Movies />\n    </MovieProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}